from time import sleep
import re

from django.core.management.base import BaseCommand
from django.conf import settings

import telebot
from telebot import types

import random

from server.models import User, Wallet, PaymentMethod, Payment, Game, DemoWallet
from server.games import start_gaming_process, select_box, draw_boxes, start_demo_gaming_process


class Command(BaseCommand):
    help = 'TG-bot'

    def handle(self, *args, **options):
        bot = telebot.TeleBot(settings.TG_TOKEN)

        @bot.message_handler(commands=['start'])
        def start(message):
            User.objects.get_or_create(telegram_id=message.from_user.id,
                                       username=message.from_user.id,
                                       first_name=message.from_user.first_name)

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            start_game = types.KeyboardButton('üé≤–ù–∞—á–∞—Ç—å –∏–≥—Ä—É')
            balance = types.KeyboardButton('üí∞–ë–∞–ª–∞–Ω—Å')
            demo_game = types.KeyboardButton('üéÆ–î–µ–º–æ –∏–≥—Ä–∞')

            markup.add(start_game, balance, demo_game, row_width=2)

            mess = f'<b>{message.from_user.first_name}</b>, –Ω–∞—á–Ω–∏ –∏–≥—Ä—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!'
            bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)

        def show_balance(message):
            user = User.objects.get(telegram_id=message.from_user.id)

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            start_game = types.KeyboardButton('üé≤–ù–∞—á–∞—Ç—å –∏–≥—Ä—É')
            make_deposit = types.KeyboardButton('üí≥–î–µ–ø–æ–∑–∏—Ç')
            demo_game = types.KeyboardButton('üéÆ–î–µ–º–æ –∏–≥—Ä–∞')

            markup.add(make_deposit, start_game, demo_game, row_width=2)

            mess = f'<b>{message.from_user.first_name}</b>, –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ {Wallet.objects.get(owner=user).balance} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä—É–±–ª–µ–π'
            # print(mess)
            bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)

        def start_demo_game(message):
            user = User.objects.get(telegram_id=message.from_user.id)
            try:
                wallet = DemoWallet.objects.get(owner=user)
            except DemoWallet.DoesNotExist:
                wallet = DemoWallet.objects.create(owner=user)

            markup = types.InlineKeyboardMarkup(row_width=3)
            bet_100 = types.InlineKeyboardButton('100', callback_data='demo_bet_100')
            bet_500 = types.InlineKeyboardButton('500', callback_data='demo_bet_500')
            bet_1000 = types.InlineKeyboardButton('1000', callback_data='demo_bet_1000')
            bet_choice = types.InlineKeyboardButton('–î—Ä—É–≥–æ–π —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏', callback_data='bet_choice')
            markup.add(bet_100, bet_500, bet_1000, bet_choice)
            mess = bot.send_message(message.chat.id,
                                    f'<b>{message.from_user.first_name}</b>, –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: <b>{wallet.balance}</b> —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä—É–±–ª–µ–π\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏:',
                                    parse_mode='html',
                                    reply_markup=markup)
            bot.register_next_step_handler(mess, demo_bet_size_selection)

        @bot.callback_query_handler(func=lambda callback: callback.data)
        def demo_bet_size_selection(callback):
            user = User.objects.get(telegram_id=callback.message.chat.id)
            wallet_balance = DemoWallet.objects.get(owner=user).balance
            if callback.data == 'bet_choice':
                mess = bot.send_message(callback.message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏:')
            elif callback.data in ('demo_bet_100', 'demo_bet_500', 'demo_bet_1000'):
                amount_list = (re.findall(r'\d+', callback.data))
                amount = int(amount_list[0])
                if amount <= wallet_balance:
                    start_demo_gaming_process(user, amount)
                    img = select_box()
                    with open(img, 'rb') as f:
                        bot.send_animation(callback.message.chat.id, f)
                        f.close()

                    markup = types.InlineKeyboardMarkup(row_width=2)
                    left = types.InlineKeyboardButton('üëà–ª–µ–≤—ã–π', callback_data='left')
                    right = types.InlineKeyboardButton('üëâ–ø—Ä–∞–≤—ã–π', callback_data='right')
                    markup.add(left, right)
                    bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–Ω–¥—É–∫', parse_mode='html', reply_markup=markup)
            elif callback.data in ('left' or 'right'):
                print('hello')
                choice = callback.data
                game = Game.objects.filter(user=user).last()
                game.choice = choice
                game.save()
                img = draw_boxes(game, game.amount)
                with open(img, 'rb') as f:
                    bot.send_animation(callback.message.chat.id, f)
                    f.close()
                if game.winning:
                    mess = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {2*game.amount}!'
                else:
                    mess = '–í–∞–º –Ω–µ –ø–æ–≤–µ–∑–ª–æ, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑—ë—Ç!'
                bot.send_message(callback.message.chat.id, mess)

        def deposit(message):
            user = User.objects.get(telegram_id=message.from_user.id)
            wallet = Wallet.objects.get(owner=user)
            wallet.balance += 1000
            wallet.save()
            mess = f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–≥—Ä–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

            start_game = types.KeyboardButton('üé≤–ù–∞—á–∞—Ç—å –∏–≥—Ä—É')
            balance = types.KeyboardButton('üí∞–ë–∞–ª–∞–Ω—Å')
            demo_game = types.KeyboardButton('üéÆ–î–µ–º–æ –∏–≥—Ä–∞')

            markup.add(start_game, balance, demo_game, row_width=2)

            bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)

        def bet_size_selection(message):
            user = User.objects.get(telegram_id=message.from_user.id)
            try:
                Wallet.objects.get(owner=user)
            except Wallet.DoesNotExist:
                Wallet.objects.create(owner=user, currency='RUB')
            mess = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏', parse_mode='html')
            bot.register_next_step_handler(mess, chose_box)

        def chose_box(message):
            amount = message.text
            wallet_balance = Wallet.objects.get(owner=User.objects.get(telegram_id=message.from_user.id)).balance
            if int(amount) <= wallet_balance:
                user = User.objects.get(telegram_id=message.from_user.id)
                start_gaming_process(user, amount)
                img = select_box()
                with open(img, 'rb') as f:
                    bot.send_animation(message.chat.id, f)
                    f.close()

                markup = types.InlineKeyboardMarkup(row_width=2)
                left = types.InlineKeyboardButton('üëà–ª–µ–≤—ã–π', callback_data='left')
                right = types.InlineKeyboardButton('üëâ–ø—Ä–∞–≤—ã–π', callback_data='right')
                markup.add(left, right)
                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–Ω–¥—É–∫', parse_mode='html', reply_markup=markup)
                # bot.register_next_step_handler(mess, game_result)
            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                make_deposit = types.KeyboardButton('üí≥–î–µ–ø–æ–∑–∏—Ç')
                start_game = types.KeyboardButton('üé≤–ù–∞—á–∞—Ç—å –∏–≥—Ä—É')
                markup.add(make_deposit, start_game, row_width=2)
                bot.send_message(message.chat.id,
                                 f'–í–∞—à –±–∞–ª–∞–Ω—Å <b>{wallet_balance} rub</b>\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç!',
                                 parse_mode='html',
                                 reply_markup=markup)


        def game_result(message):
            amount = message.text
            user = User.objects.get(telegram_id=message.from_user.id)
            img = start_gaming_process(user, amount)
            with open(img, 'rb') as f:
                bot.send_animation(message.chat.id, f)
                f.close()

        # @bot.callback_query_handler(func=lambda callback: callback.data)
        # def check_callback_currency(callback):
        #     user = User.objects.get(telegram_id=callback.message.chat.id)
            # if callback.data in ('left' or 'right'):
            #     choice = callback.data
            #     game = Game.objects.filter(user=user).last()
            #     game.choice = choice
            #     game.save()
            #     img = draw_boxes(game, game.amount)
            #     with open(img, 'rb') as f:
            #         bot.send_animation(callback.message.chat.id, f)
            #         f.close()
            #     if game.winning:
            #         mess = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {2*game.amount}!'
            #     else:
            #         mess = '–í–∞–º –Ω–µ –ø–æ–≤–µ–∑–ª–æ, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑—ë—Ç!'
            #     bot.send_message(callback.message.chat.id, mess)

        @bot.message_handler(commands=["test"])
        def test(message):
            bot.send_message(message.chat.id, 'test')
            print(message.chat)


        @bot.message_handler(content_types=["text"])
        def message(message):
            if message.text == 'üé≤–ù–∞—á–∞—Ç—å –∏–≥—Ä—É':
                bet_size_selection(message)
            elif message.text == 'üí∞–ë–∞–ª–∞–Ω—Å':
                show_balance(message)
            elif message.text == 'üí≥–î–µ–ø–æ–∑–∏—Ç':
                deposit(message)
            elif message.text == 'üéÆ–î–µ–º–æ –∏–≥—Ä–∞':
                start_demo_game(message)

        bot.infinity_polling(timeout=10, long_polling_timeout=5)
